generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  salt          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  organizations  UserOrganization[]
  createdIssues  Issue[]            @relation("Reporter")
  assignedIssues Issue[]            @relation("Assignee")
}

model Organization {
  id        String             @id @default(cuid())
  name      String
  slug      String             @unique
  projects  Project[]
  members   UserOrganization[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model UserOrganization {
  id             String       @id @default(cuid())
  user           User?        @relation(fields: [userId], references: [id])
  userId         String?
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  email          String
  role           Role         @default(MEMBER)
  invitedAt      DateTime?
  joinedAt       DateTime?
  inviteToken    String?      @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId])
}

model Project {
  id             String       @id @default(cuid())
  name           String
  key            String
  description    String?
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  sprints        Sprint[]
  issues         Issue[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([organizationId, key])
}

model Sprint {
  id        String       @id @default(cuid())
  name      String
  startDate DateTime
  endDate   DateTime
  status    SprintStatus @default(PLANNED)
  project   Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  issues    Issue[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([projectId, name])
}

model Issue {
  id          String        @id @default(cuid())
  title       String
  description String?
  status      IssueStatus
  order       Int
  priority    IssuePriority
  assignee    User?         @relation("Assignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  reporter    User          @relation("Reporter", fields: [reporterId], references: [id])
  reporterId  String
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  sprint      Sprint?       @relation(fields: [sprintId], references: [id], onDelete: SetNull)
  sprintId    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([status, order])
}

// ENUMS
enum Role {
  ADMIN
  MEMBER
}

enum SprintStatus {
  PLANNED
  ACTIVE
  COMPLETED
}

enum IssueStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// oauth providers enum
enum OAuthProvider {
  google
}
